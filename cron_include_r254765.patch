Index: usr.sbin/cron/do_command.c
===================================================================
--- usr.sbin/cron/do_command.c	(revision 254765)
+++ usr.sbin/cron/do_command.c	(working copy)
@@ -108,7 +108,7 @@
 	 * for system tasks from /etc/crontab -- they can run
 	 * as any user.
 	 */
-	if (strcmp(u->name, SYS_NAME)) {	/* not equal */
+	if (strcmp(u->name, SYS_NAME) && strcmp(u->name, SYS_INCLUDE)) {	/* not equal */
 		pam_handle_t *pamh = NULL;
 		int pam_err;
 		struct pam_conv pamc = {
Index: usr.sbin/cron/cron.h
===================================================================
--- usr.sbin/cron/cron.h	(revision 254765)
+++ usr.sbin/cron/cron.h	(working copy)
@@ -71,12 +71,15 @@
 #define	OK_EXIT		0	/* exit() with this is considered 'normal' */
 #define	MAX_FNAME	100	/* max length of internally generated fn */
 #define	MAX_COMMAND	1000	/* max length of internally generated cmd */
+#define	MAX_INCLUDENAME	1000	/* max length of file's name for including */
 #define	MAX_ENVSTR	1000	/* max length of envvar=value\0 strings */
 #define	MAX_TEMPSTR	100	/* obvious */
 #define	MAX_UNAME	20	/* max length of username, should be overkill */
 #define	ROOT_UID	0	/* don't change this, it really must be root */
 #define	ROOT_USER	"root"	/* ditto */
 #define	SYS_NAME	"*system*" /* magic owner name for system crontab */
+#define	SYS_INCLUDE	"*include*" /* magic owner name for system include crontab */
+#define	INCLUDECRON	"#include" /* directive for include othe crons in crontab */
 
 				/* NOTE: these correspond to DebugFlagNames,
 				 *	defined below.
@@ -185,12 +188,18 @@
 			 *
 			 * These are the crontabs.
 			 */
+typedef struct _cron_inc {
+	struct _cron_inc *next, *prev;
+	char		pname[MAX_INCLUDENAME];
+	time_t		m_time;
+} cron_inc;
 
 typedef	struct _user {
 	struct _user	*next, *prev;	/* links */
 	char		*name;
 	time_t		mtime;		/* last modtime of crontab */
 	entry		*crontab;	/* this person's crontab */
+	char		*include;
 } user;
 
 typedef	struct _cron_db {
@@ -198,7 +207,6 @@
 	time_t		mtime;		/* last modtime on spooldir */
 } cron_db;
 
-
 void		set_cron_uid(void),
 		set_cron_cwd(void),
 		load_database(cron_db *),
Index: usr.sbin/cron/database.c
===================================================================
--- usr.sbin/cron/database.c	(revision 254765)
+++ usr.sbin/cron/database.c	(working copy)
@@ -28,14 +28,18 @@
 #include <fcntl.h>
 #include <sys/stat.h>
 #include <sys/file.h>
+#include <libgen.h>
 
 
 #define TMAX(a,b) ((a)>(b)?(a):(b))
 
+static	char		*includemask = NULL;  
 
 static	void		process_crontab(char *, char *, char *,
 					     struct stat *,
-					     cron_db *, cron_db *);
+					     cron_db *, cron_db *),
+			get_included_files(cron_db *, cron_db *, struct stat *);
+static	int		find_in_dir(const struct dirent *d);
 
 
 void
@@ -45,10 +49,16 @@
 	DIR		*dir;
 	struct stat	statbuf;
 	struct stat	syscron_stat;
+	struct stat	include_stat;
+	//struct stat	suminclude_stat;
 	DIR_T   	*dp;
 	cron_db		new_db;
-	user		*u, *nu;
+	user		*u, *nu, *inc;
+	//cron_inc	*cinc;
+	//cron_inc	findinc;
 
+	include_stat.st_mtime = 0;
+
 	Debug(DLOAD, ("[%d] load_database()\n", getpid()))
 
 	/* before we start loading any data, do a stat on SPOOL_DIR
@@ -65,6 +75,43 @@
 	if (stat(SYSCRONTAB, &syscron_stat) < OK)
 		syscron_stat.st_mtime = 0;
 
+	/*
+	 * track files which included from 
+	 * system crontab
+	 */ 
+	if ((inc = find_user(old_db, SYS_INCLUDE)))
+	{
+		if (inc->include)
+		{
+		    if (stat(dirname(inc->include), &include_stat) < OK)
+			log_it("CRON", getpid(), "stat include files failed", SYSCRONTAB);
+		}
+	}
+/*	if ((inc = find_user(old_db, SYS_INCLUDE)))
+	{
+		if (inc->include)
+		{
+		    cinc=inc->include;    
+		    while(cinc!=NULL)
+		    {
+			log_it("CRON", getpid(), "stat include: ", cinc->pname);
+			if (stat(cinc->pname, &include_stat) < OK)
+			{
+			    log_it("CRON", getpid(), "INCLUDE STAT FAILED remove from list...", cinc->pname);
+			    if (inc->include->prev)
+				inc->include->prev->next = inc->include->next;
+			    if (inc->include->next)
+				inc->include->next->prev = inc->include->prev;
+			    free(inc->include);
+			    include_stat.st_mtime = 0;
+			}
+			suminclude_stat.st_mtime = TMAX(include_stat.st_mtime, suminclude_stat.st_mtime);
+			cinc=cinc->next;
+		    }
+		}
+	};*/
+	syscron_stat.st_mtime = TMAX(include_stat.st_mtime, syscron_stat.st_mtime);	
+
 	/* if spooldir's mtime has not changed, we don't need to fiddle with
 	 * the database.
 	 *
@@ -72,19 +119,21 @@
 	 * so is guaranteed to be different than the stat() mtime the first
 	 * time this function is called.
 	 */
+
 	if (old_db->mtime == TMAX(statbuf.st_mtime, syscron_stat.st_mtime)) {
 		Debug(DLOAD, ("[%d] spool dir mtime unch, no load needed.\n",
 			      getpid()))
 		return;
 	}
 
+	new_db.mtime = TMAX(statbuf.st_mtime, syscron_stat.st_mtime);
+	new_db.head = new_db.tail = NULL;
+
 	/* something's different.  make a new database, moving unchanged
 	 * elements from the old database, reloading elements that have
 	 * actually changed.  Whatever is left in the old database when
 	 * we're done is chaff -- crontabs that disappeared.
 	 */
-	new_db.mtime = TMAX(statbuf.st_mtime, syscron_stat.st_mtime);
-	new_db.head = new_db.tail = NULL;
 
 	if (syscron_stat.st_mtime) {
 		process_crontab("root", SYS_NAME,
@@ -92,6 +141,8 @@
 				&new_db, old_db);
 	}
 
+	get_included_files(&new_db, old_db, &include_stat);
+
 	/* we used to keep this dir open all the time, for the sake of
 	 * efficiency.  however, we need to close it in every fork, and
 	 * we fork a lot more often than the mtime of the dir changes.
@@ -204,8 +255,9 @@
 	struct passwd	*pw = NULL;
 	int		crontab_fd = OK - 1;
 	user		*u;
+	char		*include;
 
-	if (strcmp(fname, SYS_NAME) && !(pw = getpwnam(uname))) {
+	if (strcmp(fname, SYS_NAME) && strcmp(fname, SYS_INCLUDE) && !(pw = getpwnam(uname))) {
 		/* file doesn't have a user in passwd file.
 		 */
 		log_it(fname, getpid(), "ORPHAN", "no passwd entry");
@@ -245,11 +297,25 @@
 		 * we finish with the crontab...
 		 */
 		Debug(DLOAD, (" [delete old data]"))
+		if (!strcmp(fname, SYS_INCLUDE))
+		{
+			free(u->include);
+			u->include = NULL;
+		}
 		unlink_user(old_db, u);
 		free_user(u);
 		log_it(fname, getpid(), "RELOAD", tabname);
 	}
 	u = load_user(crontab_fd, pw, fname);
+	if (!strcmp(fname, SYS_INCLUDE))
+	{
+		if (u->include && strcmp(u->include, includemask))
+		{
+		    free(u->include);	
+		    include = malloc(strlen(includemask));
+		    u->include = include;
+		}
+	}
 	if (u != NULL) {
 		u->mtime = statbuf->st_mtime;
 		link_user(new_db, u);
@@ -261,3 +327,169 @@
 		close(crontab_fd);
 	}
 }
+
+static void
+get_included_files(new_db, old_db, statbuf)
+	cron_db		*new_db;
+	cron_db		*old_db;
+	struct stat	*statbuf;
+{
+    char	*root, 
+		*mask;
+    int		crontab_fd,
+		i,
+		is_regular = 0,
+    		n;
+    FILE	*syscrontab;
+    char	crontabline[MAX_COMMAND];
+    char	*delim = " \t\n";
+    char	*param = NULL;
+    char	*checkparam;
+    char	*value;
+    char	fullpath[MAX_INCLUDENAME];
+    struct stat	filestat;
+    struct dirent **entry;
+
+    /* track system included crontab file
+    */
+    Debug(DLOAD, ("\t[%d] %s: Finding includes in %s\n", getpid(), __FUNCTION__, SYSCRONTAB));
+    syscrontab = fopen(SYSCRONTAB, "r");
+    while(fgets(crontabline, MAX_COMMAND, syscrontab))
+    {
+	    value = strtok(crontabline, delim);
+	    if (!value)
+		    continue;
+	    if (strcmp(value,INCLUDECRON))
+		    continue;
+	    param = strtok(NULL, delim);
+	    checkparam = strtok(NULL, delim);
+
+	    if (checkparam != NULL)
+	    {
+		    log_it("CRON", getpid(), "Include directives not correct", SYSCRONTAB);
+		    break;
+	    }
+	    Debug(DLOAD, ("\t[%d] %s: Found #include: %s\n", getpid(), __FUNCTION__, param));
+	    if (stat(SYSCRONTAB, statbuf) < OK)
+		    statbuf->st_mtime = 0;
+	    break;
+    }
+    fclose(syscrontab);
+
+    if (!param)
+    {
+	Debug(DLOAD, ("\t[%d] %s: Include directive not find in crontab\n", getpid(), __FUNCTION__));
+	return;
+    }
+
+    mask = basename(param);
+
+    for(i=0;mask[i];i++)
+    {
+	    if (mask[i]=='*')
+	    {
+		is_regular = 1;
+		break;
+	    }
+    }
+    if (!is_regular)
+    {
+	if ((crontab_fd = open(param, O_RDONLY, 0)) < OK) {
+		/* crontab not accessible?
+		 */
+		log_it("get_included_files(): ", getpid(), "can't open include file", param);
+	}
+	else
+	{
+		if (stat(param, statbuf) < OK) {
+		    log_it("CRON", getpid(), "STAT FAILED", param);
+		    statbuf->st_mtime = 0;
+		}
+		if (!(statbuf->st_mode & S_IFREG))
+		{
+		    Debug(DLOAD, ("\t[%d] %s: File for include is not regular %s. Return %d\n", getpid(), __FUNCTION__, param, statbuf->st_mode));
+		    return;	
+		}
+		new_db->mtime = TMAX(statbuf->st_mtime, new_db->mtime);
+		Debug(DLOAD, ("\t[%d] %s: Processing included crontab: %s\n", getpid(), __FUNCTION__, param));
+		process_crontab("root", SYS_INCLUDE,
+		param, statbuf,
+		new_db, old_db);
+	}
+	return;
+    }
+
+    root = dirname(param);
+    includemask = param;
+    n=scandir(root, &entry, find_in_dir, alphasort);
+    if (n<0)
+    {
+	log_it("get_included_files(): ", getpid(), "can't find include file", param);
+	return;
+    }
+    Debug(DLOAD, ("\t[%d] %s: Found: %d files for include\n", getpid(), __FUNCTION__, n));
+    while(n--)
+    {
+	bzero(fullpath, MAX_INCLUDENAME);
+	strcpy(fullpath, root);    
+	strcat(fullpath, "/");    
+	strcat(fullpath, entry[n]->d_name);    
+	if (stat(fullpath, &filestat) < OK) {
+	    log_it("CRON", getpid(), "Stat failed for", fullpath);
+	    continue;
+	}
+	if (!(filestat.st_mode & S_IFREG))
+	{
+	    Debug(DLOAD, ("\t[%d] %s: File for include is not regular %s. Return %d\n", getpid(), __FUNCTION__, fullpath, filestat.st_mode));
+	    continue;	
+	}
+	statbuf->st_mtime = TMAX(statbuf->st_mtime, filestat.st_mtime);
+	new_db->mtime = TMAX(statbuf->st_mtime, new_db->mtime);
+	Debug(DLOAD, ("\t[%d] %s: Processing included crontab: %s\n", getpid(), __FUNCTION__, fullpath));
+	process_crontab("root", SYS_INCLUDE,
+	    fullpath, statbuf,
+	    new_db, old_db);
+    }
+    return;
+}
+
+static int
+find_in_dir(const struct dirent *d)
+{
+	char	*delim = "*";
+	char	*first,
+		*second,
+		*secondorig;
+	int	origdlen;
+	int	secondlen;
+	char	mask[MAX_INCLUDENAME];
+	char	base[MAX_INCLUDENAME];
+
+	bzero(mask, MAX_INCLUDENAME);
+	bzero(base, MAX_INCLUDENAME);
+	strcpy(mask, basename(includemask));
+	strcpy(base, basename(includemask));
+
+	if ( !strcmp(".", d->d_name) || !strcmp("..", d->d_name)) return 0;
+	if (strlen(base) == 1 && base[0] == '*')
+		return 1;
+
+	first = strtok(mask, delim);
+	second = strtok(NULL, delim);
+	origdlen = strlen(d->d_name);
+	if (second)
+	{
+	    secondlen = strlen(second);
+	    secondorig = (char *)(d->d_name + (origdlen-secondlen));
+	    if (!strncmp(first, d->d_name, strlen(first)) && !strncmp(second, secondorig, strlen(second)))
+		return 1;
+	}
+	else
+	{
+	    if (base[0] == '*' && !strncmp(first, d->d_name+(origdlen-strlen(first)), strlen(first)))
+		return 1;
+	    if (base[0] != '*' && !strncmp(first, d->d_name, strlen(first)))
+		return 1;
+	}   
+	return 0;
+};
Index: usr.sbin/doc/CHANGES
===================================================================
--- usr.sbin/doc/CHANGES	(revision 254765)
+++ usr.sbin/doc/CHANGES	(working copy)
@@ -1,3 +1,12 @@
+Vixie Cron		Changes	from V3 to V4
+Putrya Stanislav
+25-Aug-2013
+
+The crontab now can includes other crontab configs.
+If you would like to include in crontab config new config, add line like '#include config'. You may use one '*' for locate more then one configs in your directory.
+
+--------
+
 Vixie Cron		Changes from V2 to V3
 Paul Vixie
 29-Dec-1993
Index: usr.sbin/lib/env.c
===================================================================
--- usr.sbin/lib/env.c	(revision 254765)
+++ usr.sbin/lib/env.c	(working copy)
@@ -164,7 +164,7 @@
 	if (EOF == get_string(envstr, MAX_ENVSTR, f, "\n"))
 		return (ERR);
 
-	Debug(DPARS, ("load_env, read <%s>\n", envstr));
+	Debug(DPARS, ("load_env(), read <%s>\n", envstr));
 
 	bzero (name, sizeof name);
 	bzero (val, sizeof val);
